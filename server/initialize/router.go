package initialize

import (
	_ "github.com/flipped-aurora/gin-vue-admin/server/docs"
	"github.com/flipped-aurora/gin-vue-admin/server/global"
	"github.com/flipped-aurora/gin-vue-admin/server/middleware"
	"github.com/flipped-aurora/gin-vue-admin/server/router"
	"github.com/gin-gonic/gin"
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	"net/http"
)

// Initialize the master routes

func Routers() *gin.Engine {
	Router := gin.Default()
	dmsRouter := router.RouterGroupApp.Dms
	systemRouter := router.RouterGroupApp.System
	exampleRouter := router.RouterGroupApp.Example
	// If you want to not use nginx to proxy the front-end web pages, you can modify the web/.env.production under
	// VUE_APP_BASE_API = /
	// VUE_APP_BASE_PATH = http://localhost
	// Then execute the packaging command npm run build. Comment 4 lines below open
	// Router.LoadHTMLGlob("./dist/*.html") // npm打包成dist的路径
	// Router.Static("/favicon.ico", "./dist/favicon.ico")
	// Router.Static("/static", "./dist/assets")   // Static resources in dist
	// Router.StaticFile("/", "./dist/index.html") // Front-end webpage entry page

	// Provide static addresses for user avatars and files
	Router.StaticFS(global.GVA_CONFIG.Local.Path, http.Dir(global.GVA_CONFIG.Local.StorePath))

	// If you need to use https, please open this middleware and go to core/server.go and change the startup mode to Router.RunTLS("port", "your cre/pem file", "your key file")
	// Router.Use(middleware.LoadTls())

	// Cross-domain, if you need to cross-domain, you can open the comment below
	Router.Use(middleware.Cors()) // Directly release all cross-domain requests

	//Router.Use(middleware.CorsByRules()) // Release cross-origin requests according to the configured rules
	//global.GVA_LOG.Info("use middleware cors")

	Router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	global.GVA_LOG.Info("register swagger handler")

	// It is convenient to uniformly add routing group prefixes and use multiple servers online.

	PublicGroup := Router.Group("")
	{
		// health monitoring
		PublicGroup.GET("/health", func(c *gin.Context) {
			c.JSON(200, "ok")
		})
	}
	{
		systemRouter.InitBaseRouter(PublicGroup) // Register basic function routing without authentication
		systemRouter.InitInitRouter(PublicGroup) // Automatic initialization related
		dmsRouter.InitGoogleOAuthRouter(PublicGroup)
	}

	DmsPublicGroup := Router.Group("api/v1")
	{
		dmsRouter.InitDocumentCategoriesPublicRouter(DmsPublicGroup)
		dmsRouter.InitDocumentAgenciesPublicRouter(DmsPublicGroup)
		dmsRouter.InitDocumentFieldsPublicRouter(DmsPublicGroup)
		dmsRouter.InitDocumentsPublicRouter(DmsPublicGroup)
	}

	PrivateGroup := Router.Group("")
	PrivateGroup.Use(middleware.JWTAuth()).Use(middleware.CasbinHandler())
	{
		systemRouter.InitApiRouter(PrivateGroup)                 // register function api route
		systemRouter.InitJwtRouter(PrivateGroup)                 // jwt related routes
		systemRouter.InitUserRouter(PrivateGroup)                // registered user routing
		systemRouter.InitMenuRouter(PrivateGroup)                // register menu route
		systemRouter.InitSystemRouter(PrivateGroup)              // system related routes
		systemRouter.InitCasbinRouter(PrivateGroup)              // permission related routing
		systemRouter.InitAutoCodeRouter(PrivateGroup)            // create automation code
		systemRouter.InitAuthorityRouter(PrivateGroup)           // register role routing
		systemRouter.InitSysDictionaryRouter(PrivateGroup)       // dictionary management
		systemRouter.InitAutoCodeHistoryRouter(PrivateGroup)     // automate code history
		systemRouter.InitSysOperationRecordRouter(PrivateGroup)  // operation record
		systemRouter.InitSysDictionaryDetailRouter(PrivateGroup) // dictionary details management
		systemRouter.InitAuthorityBtnRouterRouter(PrivateGroup)  // dictionary details management

		exampleRouter.InitExcelRouter(PrivateGroup)                 // table import and export
		exampleRouter.InitCustomerRouter(PrivateGroup)              // customer routing
		exampleRouter.InitFileUploadAndDownloadRouter(PrivateGroup) // file upload and download function routing

		// Code generated by github.com/flipped-aurora/gin-vue-admin/server Begin; DO NOT EDIT.

		dmsRouter.InitDocumentAgenciesRouter(PrivateGroup)
		dmsRouter.InitDocumentCategoriesRouter(PrivateGroup)
		dmsRouter.InitDocumentFieldReferencesRouter(PrivateGroup)
		dmsRouter.InitDocumentFieldsRouter(PrivateGroup)
		dmsRouter.InitDocumentFilesRouter(PrivateGroup)
		dmsRouter.InitDocumentPriorityLevelsRouter(PrivateGroup)
		dmsRouter.InitDocumentRelationReferencesRouter(PrivateGroup)
		dmsRouter.InitDocumentSignerReferencesRouter(PrivateGroup)
		dmsRouter.InitDocumentsRouter(PrivateGroup)
		dmsRouter.InitDocumentUsersRouter(PrivateGroup)
		dmsRouter.InitDocumentRulesRouter(PrivateGroup)
		dmsRouter.InitDocumentSignersRouter(PrivateGroup)
		// Code generated by github.com/flipped-aurora/gin-vue-admin/server End; DO NOT EDIT.
	}

	InstallPlugin(Router) // install the plugin

	global.GVA_LOG.Info("router register success")
	return Router
}
